// Code generated by MockGen. DO NOT EDIT.
// Source: registry.go

// Package mock_registry is a generated GoMock package.
package mock_registry

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	registry "github.com/iomarmochtar/cir-rotator/pkg/registry"
)

// MockImageRegistry is a mock of ImageRegistry interface.
type MockImageRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockImageRegistryMockRecorder
}

// MockImageRegistryMockRecorder is the mock recorder for MockImageRegistry.
type MockImageRegistryMockRecorder struct {
	mock *MockImageRegistry
}

// NewMockImageRegistry creates a new mock instance.
func NewMockImageRegistry(ctrl *gomock.Controller) *MockImageRegistry {
	mock := &MockImageRegistry{ctrl: ctrl}
	mock.recorder = &MockImageRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageRegistry) EXPECT() *MockImageRegistryMockRecorder {
	return m.recorder
}

// Catalog mocks base method.
func (m *MockImageRegistry) Catalog() ([]registry.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Catalog")
	ret0, _ := ret[0].([]registry.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Catalog indicates an expected call of Catalog.
func (mr *MockImageRegistryMockRecorder) Catalog() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Catalog", reflect.TypeOf((*MockImageRegistry)(nil).Catalog))
}

// Delete mocks base method.
func (m *MockImageRegistry) Delete(repo registry.Repository, isDryRun bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", repo, isDryRun)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockImageRegistryMockRecorder) Delete(repo, isDryRun interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockImageRegistry)(nil).Delete), repo, isDryRun)
}
